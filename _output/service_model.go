// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package _output

import "encoding/json"
import "fmt"

// The document representation of the generic service modeling of an Azure Service.
type RegionAgnosticServiceModelJson struct {
	// ApplicationDefinitions corresponds to the JSON schema field
	// "applicationDefinitions".
	ApplicationDefinitions []RegionAgnosticServiceModelJsonApplicationDefinitionsElem `json:"applicationDefinitions,omitempty" yaml:"applicationDefinitions,omitempty" mapstructure:"applicationDefinitions,omitempty"`

	// Defines an assisted identity for service deployments.
	AssistedIdentity *RegionAgnosticServiceModelJsonAssistedIdentity `json:"assistedIdentity,omitempty" yaml:"assistedIdentity,omitempty" mapstructure:"assistedIdentity,omitempty"`

	// The version of the schema that a document conforms to.
	ContentVersion string `json:"contentVersion" yaml:"contentVersion" mapstructure:"contentVersion"`

	// An entity that contains information that can be used to uniquely identify an
	// Azure service.
	ServiceMetadata RegionAgnosticServiceModelJsonServiceMetadata `json:"serviceMetadata" yaml:"serviceMetadata" mapstructure:"serviceMetadata"`

	// ServiceResourceGroupDefinitions corresponds to the JSON schema field
	// "serviceResourceGroupDefinitions".
	ServiceResourceGroupDefinitions []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem `json:"serviceResourceGroupDefinitions" yaml:"serviceResourceGroupDefinitions" mapstructure:"serviceResourceGroupDefinitions"`

	// The information on how to create and configure subscriptions.
	SubscriptionProvisioning *RegionAgnosticServiceModelJsonSubscriptionProvisioning `json:"subscriptionProvisioning,omitempty" yaml:"subscriptionProvisioning,omitempty" mapstructure:"subscriptionProvisioning,omitempty"`
}

// The enumeration of the various application definitions that represent how to
// construct the applications.
type RegionAgnosticServiceModelJsonApplicationDefinitionsElem struct {
	// The arm resource name.
	ArmResourceName *string `json:"armResourceName,omitempty" yaml:"armResourceName,omitempty" mapstructure:"armResourceName,omitempty"`

	// The AKS application properties.
	AzureKubernetesService *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesService `json:"azureKubernetesService,omitempty" yaml:"azureKubernetesService,omitempty" mapstructure:"azureKubernetesService,omitempty"`

	// The human-readable name of the definition.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The flag whether to rollback on failure.
	RollbackOnFailure *string `json:"rollbackOnFailure,omitempty" yaml:"rollbackOnFailure,omitempty" mapstructure:"rollbackOnFailure,omitempty"`
}

// The AKS application properties.
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesService struct {
	// The helm package.
	Chart *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceChart `json:"chart,omitempty" yaml:"chart,omitempty" mapstructure:"chart,omitempty"`

	// The AKS namespace.
	Namespace *string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The helm chart name.
	ReleaseName *string `json:"releaseName,omitempty" yaml:"releaseName,omitempty" mapstructure:"releaseName,omitempty"`

	// The AKS spec path.
	SpecPath *string `json:"specPath,omitempty" yaml:"specPath,omitempty" mapstructure:"specPath,omitempty"`

	// The application tools.
	Tools *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceTools `json:"tools,omitempty" yaml:"tools,omitempty" mapstructure:"tools,omitempty"`

	// The helm values path.
	ValuesPath *string `json:"valuesPath,omitempty" yaml:"valuesPath,omitempty" mapstructure:"valuesPath,omitempty"`

	// The helm values paths.
	ValuesPaths []string `json:"valuesPaths,omitempty" yaml:"valuesPaths,omitempty" mapstructure:"valuesPaths,omitempty"`
}

// The helm package.
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceChart struct {
	// The ACR image path.
	AcrImagePath *string `json:"acrImagePath,omitempty" yaml:"acrImagePath,omitempty" mapstructure:"acrImagePath,omitempty"`

	// The reference for helm chart.
	Reference *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceChartReference `json:"reference,omitempty" yaml:"reference,omitempty" mapstructure:"reference,omitempty"`
}

// The reference for helm chart.
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceChartReference struct {
	// The path to helm zip artifacts
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`
}

// The application tools.
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceTools struct {
	// The helm tool
	Helm *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsHelm `json:"helm,omitempty" yaml:"helm,omitempty" mapstructure:"helm,omitempty"`

	// The kubectl tool
	Kubectl *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsKubectl `json:"kubectl,omitempty" yaml:"kubectl,omitempty" mapstructure:"kubectl,omitempty"`
}

// The helm tool
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsHelm struct {
	// The helm arguments
	Arguments *RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsHelmArguments `json:"arguments,omitempty" yaml:"arguments,omitempty" mapstructure:"arguments,omitempty"`

	// The version of helm to use
	Version *string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`
}

// The helm arguments
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsHelmArguments struct {
	// The helm timeout
	Timeout *string `json:"timeout,omitempty" yaml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
}

// The kubectl tool
type RegionAgnosticServiceModelJsonApplicationDefinitionsElemAzureKubernetesServiceToolsKubectl struct {
	// The version of kubectl to use
	Version *string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`
}

// Defines an assisted identity for service deployments.
type RegionAgnosticServiceModelJsonAssistedIdentity struct {
	// The path to the rollout parameters file that defines the parameters for
	// provisioning assisted identity.
	RolloutParametersPath string `json:"rolloutParametersPath" yaml:"rolloutParametersPath" mapstructure:"rolloutParametersPath"`

	// The list of scope tags for assisted identity rollout parameter file.
	ScopeTags []RegionAgnosticServiceModelJsonAssistedIdentityScopeTagsElem `json:"scopeTags,omitempty" yaml:"scopeTags,omitempty" mapstructure:"scopeTags,omitempty"`
}

// Defines the scope tag
type RegionAgnosticServiceModelJsonAssistedIdentityScopeTagsElem struct {
	// The scope tag name
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonAssistedIdentity) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["rolloutParametersPath"]; raw != nil && !ok {
		return fmt.Errorf("field rolloutParametersPath in RegionAgnosticServiceModelJsonAssistedIdentity: required")
	}
	type Plain RegionAgnosticServiceModelJsonAssistedIdentity
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonAssistedIdentity(plain)
	return nil
}

// An entity that contains information that can be used to uniquely identify an
// Azure service.
type RegionAgnosticServiceModelJsonServiceMetadata struct {
	// The properties that corresponds to the build-out of the service.
	Buildout *RegionAgnosticServiceModelJsonServiceMetadataBuildout `json:"buildout,omitempty" yaml:"buildout,omitempty" mapstructure:"buildout,omitempty"`

	// The name to be used for displaying information about the Azure service.
	DisplayName string `json:"displayName" yaml:"displayName" mapstructure:"displayName"`

	// The environment that this particular service is operating in, configuration
	// store settings can be used to parameterize this property.
	Environment string `json:"environment" yaml:"environment" mapstructure:"environment"`

	// The human-readable name of this Azure service. If multiple services share the
	// same service tree identifier, serviceGroup can be used to differentiate
	// individual services.
	ServiceGroup string `json:"serviceGroup" yaml:"serviceGroup" mapstructure:"serviceGroup"`

	// The service tree identifier for the Azure service.
	ServiceIdentifier string `json:"serviceIdentifier" yaml:"serviceIdentifier" mapstructure:"serviceIdentifier"`

	// The path to the service specification file. This enables automated registration
	// of a service if not already registered, when using client tools.
	ServiceSpecificationPath *string `json:"serviceSpecificationPath,omitempty" yaml:"serviceSpecificationPath,omitempty" mapstructure:"serviceSpecificationPath,omitempty"`

	// The identifier of the tenant to which all the subscriptions and resources in
	// the service model belong to, configuration store settings can be used to
	// parameterize this property.
	TenantId *string `json:"tenantId,omitempty" yaml:"tenantId,omitempty" mapstructure:"tenantId,omitempty"`
}

// The properties that corresponds to the build-out of the service.
type RegionAgnosticServiceModelJsonServiceMetadataBuildout struct {
	// The list of dependent services that should be available before this service can
	// be built in an Azure region.
	Dependencies []RegionAgnosticServiceModelJsonServiceMetadataBuildoutDependenciesElem `json:"dependencies,omitempty" yaml:"dependencies,omitempty" mapstructure:"dependencies,omitempty"`

	// The list of resource capabilities enabled by this service.
	Enables []RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem `json:"enables,omitempty" yaml:"enables,omitempty" mapstructure:"enables,omitempty"`

	// The flag to pick up this service for automated buildout.
	IsForAutomatedBuildout *string `json:"isForAutomatedBuildout,omitempty" yaml:"isForAutomatedBuildout,omitempty" mapstructure:"isForAutomatedBuildout,omitempty"`

	// The phase of the service buildout. Only accepted values are 'Pre', 'Core' and
	// 'Post'.
	Phase *string `json:"phase,omitempty" yaml:"phase,omitempty" mapstructure:"phase,omitempty"`
}

// The information that identifies the dependency.
type RegionAgnosticServiceModelJsonServiceMetadataBuildoutDependenciesElem struct {
	// The name to be used to display information about this dependency.
	DisplayName *string `json:"displayName,omitempty" yaml:"displayName,omitempty" mapstructure:"displayName,omitempty"`

	// The name given to refer to this dependency.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The service group name of the dependency.
	ServiceGroup *string `json:"serviceGroup,omitempty" yaml:"serviceGroup,omitempty" mapstructure:"serviceGroup,omitempty"`

	// The service tree identifier of the dependency.
	ServiceIdentifier *string `json:"serviceIdentifier,omitempty" yaml:"serviceIdentifier,omitempty" mapstructure:"serviceIdentifier,omitempty"`
}

// The item with resource capabilities enabled by this service.
type RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem struct {
	// The properties for the armResourceProvider type.
	Properties *RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties `json:"properties,omitempty" yaml:"properties,omitempty" mapstructure:"properties,omitempty"`

	// The type of the enabled capability.
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// The properties for the armResourceProvider type.
type RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties struct {
	// The namespace of the ARM resource provider enabled by this service.
	Namespace string `json:"namespace" yaml:"namespace" mapstructure:"namespace"`

	// The list of ARM resource types enabled by this service
	ResourceTypes []RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem `json:"resourceTypes" yaml:"resourceTypes" mapstructure:"resourceTypes"`
}

// The ARM resource types enabled by this service
type RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem struct {
	// The list API versions of supported for the ARM resource type
	ApiVersions []string `json:"apiVersions,omitempty" yaml:"apiVersions,omitempty" mapstructure:"apiVersions,omitempty"`

	// The name of the ARM resource type. Wildcard character * is supported after a
	// '/'.
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemPropertiesResourceTypesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["namespace"]; raw != nil && !ok {
		return fmt.Errorf("field namespace in RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties: required")
	}
	if _, ok := raw["resourceTypes"]; raw != nil && !ok {
		return fmt.Errorf("field resourceTypes in RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.ResourceTypes != nil && len(plain.ResourceTypes) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "resourceTypes", 1)
	}
	*j = RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElemProperties(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceMetadataBuildoutEnablesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceMetadata) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["displayName"]; raw != nil && !ok {
		return fmt.Errorf("field displayName in RegionAgnosticServiceModelJsonServiceMetadata: required")
	}
	if _, ok := raw["environment"]; raw != nil && !ok {
		return fmt.Errorf("field environment in RegionAgnosticServiceModelJsonServiceMetadata: required")
	}
	if _, ok := raw["serviceGroup"]; raw != nil && !ok {
		return fmt.Errorf("field serviceGroup in RegionAgnosticServiceModelJsonServiceMetadata: required")
	}
	if _, ok := raw["serviceIdentifier"]; raw != nil && !ok {
		return fmt.Errorf("field serviceIdentifier in RegionAgnosticServiceModelJsonServiceMetadata: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceMetadata
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.DisplayName) < 5 {
		return fmt.Errorf("field %s length: must be >= %d", "displayName", 5)
	}
	if len(plain.ServiceGroup) < 4 {
		return fmt.Errorf("field %s length: must be >= %d", "serviceGroup", 4)
	}
	if len(plain.ServiceIdentifier) < 36 {
		return fmt.Errorf("field %s length: must be >= %d", "serviceIdentifier", 36)
	}
	if plain.ServiceSpecificationPath != nil && len(*plain.ServiceSpecificationPath) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "serviceSpecificationPath", 1)
	}
	if plain.TenantId != nil && len(*plain.TenantId) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "tenantId", 1)
	}
	*j = RegionAgnosticServiceModelJsonServiceMetadata(plain)
	return nil
}

// The enumeration of the various resource group definitions that represent how to
// construct the resource groups that constitute this cloud service.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem struct {
	// The Azure Resource Group name. System variables and configuration store
	// settings can be used to parameterize this property for different locations,
	// clouds. If not provided, an auto-generated name based on the
	// ServiceResourceGroupDefinition name, the buildout location and stamp would be
	// used.
	AzureResourceGroupName *string `json:"azureResourceGroupName,omitempty" yaml:"azureResourceGroupName,omitempty" mapstructure:"azureResourceGroupName,omitempty"`

	// The constraint defining the scope at which the service resource group and the
	// resources defined should be deployed.
	ExecutionConstraint *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint `json:"executionConstraint,omitempty" yaml:"executionConstraint,omitempty" mapstructure:"executionConstraint,omitempty"`

	// The ID of the management group that management-group-level resources created
	// from this service resource group definition will be deployed to. Can be
	// parameterized (see docs).
	ManagementGroupId *string `json:"managementGroupId,omitempty" yaml:"managementGroupId,omitempty" mapstructure:"managementGroupId,omitempty"`

	// The human-readable name of the definition.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The policy information.
	Policy *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemPolicy `json:"policy,omitempty" yaml:"policy,omitempty" mapstructure:"policy,omitempty"`

	// The list of scope tags for the service resource group definition.
	ScopeTags []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemScopeTagsElem `json:"scopeTags,omitempty" yaml:"scopeTags,omitempty" mapstructure:"scopeTags,omitempty"`

	// The enumeration of the various resource definitions that represent how to
	// construct the resources that constitute this resource group definition.
	ServiceResourceDefinitions []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem `json:"serviceResourceDefinitions" yaml:"serviceResourceDefinitions" mapstructure:"serviceResourceDefinitions"`

	// The information about the stamps that should be created for this service
	// resource group definition.
	Stamps *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemStamps `json:"stamps,omitempty" yaml:"stamps,omitempty" mapstructure:"stamps,omitempty"`

	// The key to refer to a specific subscription. Declaring the same subscriptionKey
	// across different ServiceResourceGroupDefinitions will deploy those resources to
	// the same subscription. Configuration store settings can be used to parameterize
	// this property.
	SubscriptionKey string `json:"subscriptionKey" yaml:"subscriptionKey" mapstructure:"subscriptionKey"`
}

// The constraint defining the scope at which the service resource group and the
// resources defined should be deployed.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint struct {
	// The flag to represent if resources should be deployed to current cloud. Format
	// is boolean or configuration store settings can be used to parameterize this
	// property.
	IsInCloud interface{} `json:"isInCloud,omitempty" yaml:"isInCloud,omitempty" mapstructure:"isInCloud,omitempty"`

	// The execution constraint scope level
	Level string `json:"level" yaml:"level" mapstructure:"level"`

	// The quantifier to decide if already deployed resources can be redeployed or
	// not.
	Quantifier string `json:"quantifier" yaml:"quantifier" mapstructure:"quantifier"`

	// The specified regions to deploy to. Format is string array or configuration
	// store settings can be used to parameterize this property.
	Regions interface{} `json:"regions,omitempty" yaml:"regions,omitempty" mapstructure:"regions,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["level"]; raw != nil && !ok {
		return fmt.Errorf("field level in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint: required")
	}
	if _, ok := raw["quantifier"]; raw != nil && !ok {
		return fmt.Errorf("field quantifier in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemExecutionConstraint(plain)
	return nil
}

// The policy information.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemPolicy struct {
	// Determines if safe rollout policy should be applied on this resource group
	// definition.
	SkipSafeRolloutPolicyCheck *bool `json:"skipSafeRolloutPolicyCheck,omitempty" yaml:"skipSafeRolloutPolicyCheck,omitempty" mapstructure:"skipSafeRolloutPolicyCheck,omitempty"`
}

// Defines the scope tag
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemScopeTagsElem struct {
	// The scope tag name
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// The object representation of the definition of a particular resource in the
// Cloud Service Model.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem struct {
	// Resource composition parts which apply to this resource definition
	ComposedOf RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOf `json:"composedOf" yaml:"composedOf" mapstructure:"composedOf"`

	// The human-readable name of the definition.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The policy information.
	Policy *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemPolicy `json:"policy,omitempty" yaml:"policy,omitempty" mapstructure:"policy,omitempty"`

	// The list of scope tags for the service resource definition.
	ScopeTags []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemScopeTagsElem `json:"scopeTags,omitempty" yaml:"scopeTags,omitempty" mapstructure:"scopeTags,omitempty"`
}

// Resource composition parts which apply to this resource definition
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOf struct {
	// Application Composition Part
	Application *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfApplication `json:"application,omitempty" yaml:"application,omitempty" mapstructure:"application,omitempty"`

	// Arm Composition Part
	Arm *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfArm `json:"arm,omitempty" yaml:"arm,omitempty" mapstructure:"arm,omitempty"`

	// Extension Composition Part
	Extension *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtension `json:"extension,omitempty" yaml:"extension,omitempty" mapstructure:"extension,omitempty"`
}

// Application Composition Part
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfApplication struct {
	// The list of the application definition names.
	Names []string `json:"names,omitempty" yaml:"names,omitempty" mapstructure:"names,omitempty"`
}

// Arm Composition Part
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfArm struct {
	// The deployment level for the ARM templates.
	DeploymentLevel *string `json:"deploymentLevel,omitempty" yaml:"deploymentLevel,omitempty" mapstructure:"deploymentLevel,omitempty"`

	// The path to the ARM parameters file for this particular definition.
	ParametersPath *string `json:"parametersPath,omitempty" yaml:"parametersPath,omitempty" mapstructure:"parametersPath,omitempty"`

	// The path to the ARM template file for this particular definition.
	TemplatePath *string `json:"templatePath,omitempty" yaml:"templatePath,omitempty" mapstructure:"templatePath,omitempty"`
}

// Extension Composition Part
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtension struct {
	// The allowed Http extension types.
	AllowedTypes []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionAllowedTypesElem `json:"allowedTypes,omitempty" yaml:"allowedTypes,omitempty" mapstructure:"allowedTypes,omitempty"`

	// The path to the rollout parameters file for this particular definition.
	RolloutParametersPath *string `json:"rolloutParametersPath,omitempty" yaml:"rolloutParametersPath,omitempty" mapstructure:"rolloutParametersPath,omitempty"`

	// Shell extensions.
	Shell []RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElem `json:"shell,omitempty" yaml:"shell,omitempty" mapstructure:"shell,omitempty"`
}

type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionAllowedTypesElem struct {
	// Full extension name, e.g. 'ExtenionNamespace/ExtentionType'
	Type *string `json:"Type,omitempty" yaml:"Type,omitempty" mapstructure:"Type,omitempty"`
}

type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElem struct {
	// The shell extension definition properties.
	Properties *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties `json:"properties,omitempty" yaml:"properties,omitempty" mapstructure:"properties,omitempty"`

	// The shell extension name, e.g. 'MySimpleShell'
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// The shell extension definition properties.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties struct {
	// The CPU core count as a string with integer value e.g. 2
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty" mapstructure:"cpu,omitempty"`

	// Shell image name. Must end in -l for linux images and -w for windows images.
	// e.g. adm-ubuntu-1804-l
	ImageName string `json:"imageName" yaml:"imageName" mapstructure:"imageName"`

	// Shell image version. Must begin with v. e.g. v16
	ImageVersion string `json:"imageVersion" yaml:"imageVersion" mapstructure:"imageVersion"`

	// The memory in GB as a string with decimal value e.g. 2.0
	MemoryInGB *string `json:"memoryInGB,omitempty" yaml:"memoryInGB,omitempty" mapstructure:"memoryInGB,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["imageName"]; raw != nil && !ok {
		return fmt.Errorf("field imageName in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties: required")
	}
	if _, ok := raw["imageVersion"]; raw != nil && !ok {
		return fmt.Errorf("field imageVersion in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemComposedOfExtensionShellElemProperties(plain)
	return nil
}

// The policy information.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemPolicy struct {
	// Determines if safe rollout policy should be applied on this resource
	// definition.
	SkipSafeRolloutPolicyCheck *bool `json:"skipSafeRolloutPolicyCheck,omitempty" yaml:"skipSafeRolloutPolicyCheck,omitempty" mapstructure:"skipSafeRolloutPolicyCheck,omitempty"`
}

// Defines the scope tag
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElemScopeTagsElem struct {
	// The scope tag name
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["composedOf"]; raw != nil && !ok {
		return fmt.Errorf("field composedOf in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemServiceResourceDefinitionsElem(plain)
	return nil
}

// The information about the stamps that should be created for this service
// resource group definition.
type RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemStamps struct {
	// The count of the number of stamps to provision for this service resource group
	// definition in a location. Configuration store settings can be used to
	// parameterize this property.
	Count int `json:"count,omitempty" yaml:"count,omitempty" mapstructure:"count,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemStamps) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemStamps
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["count"]; !ok || v == nil {
		plain.Count = 1.0
	}
	*j = RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElemStamps(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem: required")
	}
	if _, ok := raw["serviceResourceDefinitions"]; raw != nil && !ok {
		return fmt.Errorf("field serviceResourceDefinitions in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem: required")
	}
	if _, ok := raw["subscriptionKey"]; raw != nil && !ok {
		return fmt.Errorf("field subscriptionKey in RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem: required")
	}
	type Plain RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonServiceResourceGroupDefinitionsElem(plain)
	return nil
}

// The information on how to create and configure subscriptions.
type RegionAgnosticServiceModelJsonSubscriptionProvisioning struct {
	// The role assignment configurations for the subscriptions.
	RoleAssignment *RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment `json:"roleAssignment,omitempty" yaml:"roleAssignment,omitempty" mapstructure:"roleAssignment,omitempty"`

	// The path to the rollout parameters file that defines the parameters for
	// provisioning subscriptions.
	RolloutParametersPath string `json:"rolloutParametersPath" yaml:"rolloutParametersPath" mapstructure:"rolloutParametersPath"`

	// The list of scope tags for subscription provisioning parameters files
	ScopeTags []RegionAgnosticServiceModelJsonSubscriptionProvisioningScopeTagsElem `json:"scopeTags,omitempty" yaml:"scopeTags,omitempty" mapstructure:"scopeTags,omitempty"`
}

// The role assignment configurations for the subscriptions.
type RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment struct {
	// The path to the ARM parameters file that corresponds to the role assignments
	// ARM template.
	ArmParametersPath string `json:"armParametersPath" yaml:"armParametersPath" mapstructure:"armParametersPath"`

	// The path to the ARM template file which declares role assignments that are
	// required to be configured on the subscription.
	ArmTemplatePath string `json:"armTemplatePath" yaml:"armTemplatePath" mapstructure:"armTemplatePath"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["armParametersPath"]; raw != nil && !ok {
		return fmt.Errorf("field armParametersPath in RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment: required")
	}
	if _, ok := raw["armTemplatePath"]; raw != nil && !ok {
		return fmt.Errorf("field armTemplatePath in RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment: required")
	}
	type Plain RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonSubscriptionProvisioningRoleAssignment(plain)
	return nil
}

// Defines the scope tag
type RegionAgnosticServiceModelJsonSubscriptionProvisioningScopeTagsElem struct {
	// The scope tag name
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJsonSubscriptionProvisioning) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["rolloutParametersPath"]; raw != nil && !ok {
		return fmt.Errorf("field rolloutParametersPath in RegionAgnosticServiceModelJsonSubscriptionProvisioning: required")
	}
	type Plain RegionAgnosticServiceModelJsonSubscriptionProvisioning
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJsonSubscriptionProvisioning(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegionAgnosticServiceModelJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["contentVersion"]; raw != nil && !ok {
		return fmt.Errorf("field contentVersion in RegionAgnosticServiceModelJson: required")
	}
	if _, ok := raw["serviceMetadata"]; raw != nil && !ok {
		return fmt.Errorf("field serviceMetadata in RegionAgnosticServiceModelJson: required")
	}
	if _, ok := raw["serviceResourceGroupDefinitions"]; raw != nil && !ok {
		return fmt.Errorf("field serviceResourceGroupDefinitions in RegionAgnosticServiceModelJson: required")
	}
	type Plain RegionAgnosticServiceModelJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RegionAgnosticServiceModelJson(plain)
	return nil
}
